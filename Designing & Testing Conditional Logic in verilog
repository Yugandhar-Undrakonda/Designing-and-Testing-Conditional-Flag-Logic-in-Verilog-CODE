`timescale 1ns / 1ps
 
module tb( );
 
 
reg [15:0] GPR [32:0]; ////32 Register are user accessible , R[32] -- mul
reg [31:0] IR; 
reg [31:0] temp;
 
`define opcode IR[31:27]
`define rdst IR[26:22]
`define src1 IR[21:17]
`define imm_sel IR[16]
`define src2 IR[15:11]
 
//// opcode(5) reg_dst(5) src1_reg (5) sel_mode src2_reg(5)
/// rdst = rsrc1 + rsrc2;
/// rdst = rsrc1 + immediate_number
`define mov 5'b00000
`define add 5'b00001
`define sub 5'b00010
`define mul 5'b00011
 
task execute();
begin
case(`opcode)
/////////Updating Register data
`mov : begin
if(`imm_sel == 1'b1)
GPR[`rdst] = IR[15:0];
else
GPR[`rdst] = GPR[`src1];
end
 
`add: begin
GPR[`rdst] = GPR[`src1] + GPR[`src2];
end
 
`sub: begin
GPR[`rdst] = GPR[`src1] - GPR[`src2];
end
 
`mul : begin
temp = GPR[`src1] * GPR[`src2];
GPR[`rdst] =temp[15:0];
GPR[32] = temp[31:16];
end
endcase
end
endtask
 
reg zero, sign, carry, overflow;
reg [15:0] s1, s2;
reg [32:0] o;
task conditionflag();
begin
/*
if(`imm_sel == 1'b1) begin
s1 = GPR[`src1];
s2 = IR[15:0];
end
else begin
s1 = GPR[`src1];
s2 = GPR[`src2];
end
*/
 
case(`opcode)
`add: o = s1 + s2;
`sub: o = s1 - s2;
`mul: o = s1 * s2;
default: o = 0;
endcase
 
zero = ~(|o[32:0]);
sign = (o[15] & ~IR[28] & IR[27] ) | (o[15] & IR[28] & ~IR[27]) | (o[31] & IR[28] & IR[27] );
carry = o[16] & ~IR[28] & IR[27];
overflow = ( ~s1[15] & ~s2[15] & o[15] & ~IR[28] & IR[27] ) |
           ( s1[15] & s2[15] & ~o[15] & ~IR[28] & IR[27] ) |
           ( ~s1[15] & s2[15] & o[15] & IR[28] & ~IR[27] ) |
           ( s1[15] & ~s2[15] & ~o[15] & IR[28] & ~IR[27] );
end
endtask
 
initial begin
IR = 0;
#10;
IR[31:27] = 5'b00001;
s1 = 16'b1000_0000_0000_0000;
s2 = 16'b0000_0000_0000_0000;
conditionflag();
end
 
endmodule
